import stream

import src/utils

// Finds the positions of "interesting" cells on the player's board for solving. 
// * A cell is considered interesting if it provides new information for solving: 
// * - It is a Number(n) cell (not Hidden or Flagged), and
// * - It has at least one Hidden neigbour 
def interestingCells(playerBoard: Board): List[Pos] = {
  var cells = []
  playerBoard.foreachIndex{ (row_idx, row) =>
    row.foreachIndex{ (col_idx, col) => 
      with on[OutOfBounds].panic
      playerBoard.get(row_idx).get(col_idx) match {
        case Number(n) => // cells with Numbers can be interesting (if they have >= 1 Hidden neighbour)
          val neighbours: List[Pos] = collectList{neighboursOf(playerBoard.size,Pos(row_idx,col_idx), 1)}
          if (neighbours.any{n => 
            with on[OutOfBounds].panic
            playerBoard.get(n.r).get(n.c) match {
              case Hidden() => true
              case _ => false
            }}) cells = Cons(Pos(row_idx,col_idx), cells)
        case _ => cells = cells // Hidden and Flagged cells aren't interesting, Mines on the player's board invalid so not possible either
      }
    }
  }
  cells
}

// since computing all the probabilities is too much computation, already for 9x9 Boards, try different approach:
// take in account the flags the player put and identify safe or unsafe cells like this:
// 1. safe cells: for a Number(n) cell: if #Flagged neighbours = n, all Hidden neighbours are safe
// 2. guaranteed mines: for a Number(n) cell: if #Hidden neighbours == n - #Flagged neighbours, all Hidden neighbours are mines
// Now a safe move is either uncovering a safe cell, or flagging a guaranteed mine cell. 
// If no safe moves exists, any move has to be safe
// If a safe Uncover move exists, but the player picks another one, immediate game over
// 
def safeMoves(playerBoard: Board): List[Command] = {
  var commands = []

  interestingCells(playerBoard).foreach{pos =>
    with on[OutOfBounds].panic
    playerBoard.get(pos.r).get(pos.c) match {
      case Number(n) => 
        val neighbours = collectList[Pos]{neighboursOf(playerBoard.size, pos, 1)}
        var hidden = []
        var flagCount = 0
        
        neighbours.foreach{nb =>
          with on[OutOfBounds].panic
          playerBoard.get(nb.r).get(nb.c) match {
            case Hidden() => hidden = Cons(nb, hidden)
            case Flagged() => flagCount = flagCount + 1
            case _ => ()
          }
        }
        if(hidden.size == n - flagCount){ 
            hidden.foreach{ nb =>
            if(not(commands.any{c => 
              c match {
                case PerformAction(a,p) =>
                  p.posEquals(nb)
                case _ => false}})) commands = Cons(PerformAction(Flag(), nb), commands)}
            }
          else if(flagCount == n){
              hidden.foreach{ nb =>
              if(not(commands.any{c => 
              c match {
                case PerformAction(a,p) =>
                  p.posEquals(nb)
                case _ => false}})) commands = Cons(PerformAction(Uncover(), nb), commands)}
          }
      case _ => ()
    }    
  }
  commands
}

def noSafeUncovering(safeMoves: List[Command]): Bool = {
  if(safeMoves.isEmpty) true
  else{
    safeMoves.all{c =>
      c match {
        case PerformAction(a,pos) => {
          a match {
            case Uncover() => false
            case _ => true
          }
        }
        case _ => true // TODO invalid input?
      }
    }
  }
}
