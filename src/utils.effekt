import tty
import stream

extern def log10(n: Double): Double = 
  js"Math.log10(${n})"

def count_digits(number: Int): Int = {
  val n: Double = number.toDouble
  if(n == 0.0) 1
  else floor(log10(abs(n))) + 1
}

extern js"""
  function getRandomInt(min, max) {
    const minCeiled = Math.ceil(min);
    const maxFloored = Math.floor(max);
    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive
  }
"""

extern def randomInt(minInclusive: Int, maxExclusive: Int): Int =
  js"getRandomInt(${minInclusive}, ${maxExclusive})"
    

effect invalidInput(msg: String): Unit
effect gameOver(why: String, finalBoard: Board): Unit
effect winGame(finalBoard: Board): Unit
effect reduceMineCount(): Unit

// custom type to represent the state of a cell of the Board
// Invariants: Player board has only Hidden, Number and Flag cells
//             Solution board has only Number and Mine cells
type CellState {
  Hidden(); // Hidden cells are only possible on the board of the player
  Number(n: Int);
  Mine(); // Mines won't be shown on the board of the player. If a cell with a mine isn't Hidden, the game is lost
  Flagged() // Flagged cells are only possible on the board of the player
}

type Board = List[List[CellState]]

type Action {
  Flag();
  Uncover()
}

type Command {
  PerformAction(a: Action, pos: Pos);
  Help();
  Quit();
  Rules()
}

record Pos(r: Int, c: Int)
record Rule(mineCount: Int, positions: List[Pos])
type Configuration = List[Pos] // TODO use Set

def posEquals(left: Pos, right: Pos) = (left, right) match {
  case (Pos(lx, ly), Pos(rx, ry)) => lx == rx && ly == ry
}

/// Gets the neighbouring positions of a given position `pos` within a specified `radius`
/// Only valid positions for a board of given size are being returned and the position itself is excluded
/// with radius = 1, these are the 8 immediate neighbours (including the diagonal)
/// with radius=2, these are neighbours&their neighbours
/// 
def neighboursOf(boardSize: Int, pos: Pos, radius: Int): Unit/emit[Pos] = {
  with val dx = for[Int] { range(neg(radius), radius + 1) }
  with val dy = for[Int] { range(neg(radius), radius + 1) }
  val newPosition = Pos(pos.r + dx, pos.c + dy)

  if(isValidIndex(boardSize, newPosition) && not((dx == 0) && (dy == 0))){
    do emit(newPosition)
  }
}

// Gets the neighbouring positions of a given position `pos`, excluding the diagonal
// -> each pos has max 4 non-diagonal neighbours
def nonDiagonalNeighboursOf(boardSize: Int, pos: Pos) : Unit/emit[Pos] ={
  // Define movement directions: top, bottom, left, right (no diagonals)
  val dx = [-1, 1, 0, 0] // Up, Down, Left, Right
  val dy = [0, 0, -1, 1] // Up, Down, Left, Right

  with on[OutOfBounds].panic
  each(0,4){ n => 
    val newRow = pos.r + dx.get(n)
    val newCol = pos.c + dy.get(n)
    if(isValidIndex(boardSize, Pos(newRow, newCol))) {
      do emit(Pos(newRow, newCol))
    }
  }
}

// Updates the state of a cell at the given position `pos` on the board with the new state `state`
// Returns a new board where only the specified cell has been updated, leaving the rest unchanged
def updateCell(board: Board, pos: Pos, state: CellState): Board = {
  board.updateAt(pos.r){r =>
    r.updateAt(pos.c){s => state}}
}

// Counts the number of Mines surrounding the cell at Position `pos` 
// min: 0, max: 8
def countAdjacentMines(board: Board, pos: Pos): Int = {
  val neighbours = collectList[Pos]{neighboursOf(board.size, pos, 1)}
  neighbours.count{neighbourPos => isMine(board, neighbourPos)}
}

// Determines if a given position `pos` is within the valid bounds of a square board of size `size`
def isValidIndex(size: Int, pos: Pos): Bool = {
  (pos.r >= 0) && (pos.r < size) && (pos.c >= 0) && (pos.c < size)
}

// Checks if the cell with index `pos` contains a Mine() on the given board
def isMine(board: Board, pos: Pos): Bool = {
  with on[OutOfBounds].panic
  board.get(pos.r).get(pos.c) match {
    case Mine() => true
    case _ => false
  }
}

// Returns the positions of all cells that are still Hidden on the player's board
def getHiddenCells(board: Board): List[Pos] = {
  var hiddenCells: List[Pos] = []
  board.foreachIndex{ (rowIndex, row) =>
    row.foreachIndex{ (colIndex, cell) => 
      with on[OutOfBounds].panic
      board.get(rowIndex).get(colIndex) match {
        case Hidden() => hiddenCells = Cons(Pos(rowIndex, colIndex), hiddenCells)
        case _ => ()
      }
    }
  }
  hiddenCells
}

def printRules(): Unit = {
  println("")
  println("Here are the rules of Fair Minesweeper:")
  println("1. The board will display numbers. Each number indicates how many of the 8 surrounding cells are mines.")
  println("2. Your goal is to uncover all the safe cells that do not contain a mine to win the game.")
  println("3. Sometimes, you can't be sure whether any of the remaining covered cells are mines or safe.")
  println("   - In such cases, the first Fair Rule applies: any cell you uncover is guaranteed to be safe.")
  println("4. Be careful, though! If you could have been certain that a specific cell was safe but tried to uncover a different one, you lose immediately.")
  println("   - Guessing is not allowed when a safe move is possible.")
  println("5. Flagging cells that you are 100% sure contain mines is also considered a safe move.")
  println("   - You must flag all known mines before making any guesses.")
  println("Now, have fun and good luck!")
  println("")
}

val helpMessage = "To make an action, type one of the following: u to uncover, f to flag/unflag, h for help, r to print the rules and q to quit the game"
val wonMessage = """
 __     ______  _    _    __          ______  _   _  
 \ \   / / __ \| |  | |   \ \        / / __ \| \ | | 
  \ \_/ / |  | | |  | |    \ \  /\  / / |  | |  \| | 
   \   /| |  | | |  | |     \ \/  \/ /| |  | | . ` | 
    | | | |__| | |__| |      \  /\  / | |__| | |\  | 
    |_|  \____/ \____/        \/  \/   \____/|_| \_| 
                                                     
                                                     

"""

val gameOverMessage = """
 __     ______  _    _     _      ____   _____ _______      __
 \ \   / / __ \| |  | |   | |    / __ \ / ____|__   __|  _ / /
  \ \_/ / |  | | |  | |   | |   | |  | | (___    | |    (_) | 
   \   /| |  | | |  | |   | |   | |  | |\___ \   | |      | | 
    | | | |__| | |__| |   | |___| |__| |____) |  | |     _| | 
    |_|  \____/ \____/    |______\____/|_____/   |_|    (_) | 
                                                           \_\
                                                              
"""

record LengthMismatch()

def leftPadE(s: String, desiredLength: Int, padding: Char): String / Exception[LengthMismatch] = {
  val actualLength = s.length
  if (actualLength > desiredLength) {
    do raise(LengthMismatch(), "Given string is longer than desired length!")
  }

  val prefix: String = collectString {
    with replicate(desiredLength - actualLength)
    padding
  }
  prefix ++ s
}

def leftPad(s: String, desiredLength: Int, padding: Char): String = {
  val actualLength = s.length

  val prefix: String = collectString {
    with replicate(desiredLength - actualLength)
    padding
  }
  prefix ++ s
}

def leftPadZeros(n: Int, desiredLength: Int) =
  n.show.leftPad(desiredLength, ' ')


// prints the row of a board while translating the CellState Types to the corresponding string representation/symbol
// if a there aren't any mines around a cell, the field is displayed as an empty field (-)
def printRowold(row: List[CellState]): String = {
  with Formatted::formatting;
  var out: String = ""
  row.foreach{ c =>
    c match {
      case Hidden() => out = out ++ "  " ++ Formatted::colored("H", Color::BLACK)
      case Number(0) => out = out ++ Formatted::colored("  -", Color::CYAN)
      case Number(n) => out = out ++ "  " ++ show(n)
      case Mine() => out = out ++ Formatted::colored("  M", Color::YELLOW)
      case Flagged() => out = out ++ "  F".red // toString('ðŸš©') 
    }
  }
  out
}

// prints a given board in a nice way
def printBoardold(board: Board): Unit = {
  val boardsize = board.size
  var rowIndices = "    "
  var border = "  "
  each(0, boardsize) {n =>
    rowIndices = rowIndices ++ show(n) ++ "  "
    border = border ++ "---"
  }
  println(rowIndices)
  println(border)
  each(0, boardsize) {n =>
    with on[OutOfBounds].panic
    val row: List[CellState] = board.get(n)
    val s: String = printRowold(row)
    println(show(n) ++ "|" ++ s)   
  }
  println("")
}

// prints the row of a board while translating the CellState Types to the corresponding string representation/symbol
// if a there aren't any mines around a cell, the field is displayed as an empty field (-)
def printRow(row: List[CellState], cellWidth: Int): String = {
  with Formatted::formatting;
  val cW = 2  // TODO
  val space = "".leftPad(cW,' ')
  var out: String = ""
  row.foreach{ c =>
    c match {
      case Hidden() => out = out ++ Formatted::colored("H", Color::BLACK) ++ space 
      case Number(0) => out = out ++ Formatted::colored("-", Color::CYAN) ++ space
      case Number(n) => out = out ++ show(n) ++ space
      case Mine() => out = out ++ Formatted::colored("M", Color::YELLOW) ++ space
      case Flagged() => out = out ++ "F".red ++ space // toString('ðŸš©') 
    }
  }
  out
}


// prints a given board in a nice way
def printBoard(board: Board): Unit = {
  val boardsize = board.size
  val maxIndexDigits = count_digits(boardsize)
  val cellWidth: Int = maxIndexDigits + 1

  // build the header row and the header border
  var colIndices = " ".repeat(cellWidth) // TODO check for different sizes

  var border = " ".repeat(maxIndexDigits + 2)
  each(0, boardsize) {n =>
    val paddedIndex = leftPad(show(n), 3, ' ') //show(n) ++ " ".repeat(2)
    colIndices = colIndices ++ paddedIndex
    border = border ++ "-".repeat(3)
  }
  println(colIndices)
  println(border)

  // print the rows
  each(0, boardsize) {n =>
    with on[OutOfBounds].panic
    val row: List[CellState] = board.get(n)
    val s: String = printRow(row, cellWidth)

    // Pad the row index for alignment
    val paddedRowIndex = leftPad(show(n), maxIndexDigits, ' ')
    println(paddedRowIndex ++ " | " ++ s)
  }
  println("")
}

def filter[A](list: List[A]){predicate: A => Bool}: List[A] = {
  list.foldRight([]) { (elem, acc) =>
    if (predicate(elem)) Cons(elem, acc) else acc
  }
}

def main() = {
  println(show(count_digits(0)))
  println(show([1,2,3,1,4].filter{e => e > 1}))
}

