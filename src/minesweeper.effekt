module src/minesweeper
import tty

extern js"""
  function getRandomInt(min, max) {
    const minCeiled = Math.ceil(min);
    const maxFloored = Math.floor(max);
    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive
  }
"""

extern def randomInt(minInclusive: Int, maxExclusive: Int): Int =
  js"getRandomInt(${minInclusive}, ${maxExclusive})"

effect invalidInput(msg: String): Unit

// custom type to represent the state of a cell of the Board
// Invariants: Player board has only Hidden, Number and Flag cells
//             Solution board has only Number and Mine cells
type CellState {
  Hidden(); // Hidden cells are only possible on the board of the player
  Number(n: Int);
  Mine(); // Mines won't be shown on the board of the player. If a cell with a mine isn't Hidden, the game is lost
  Flag()
}

type Board = List[List[CellState]]

type Action {
  AddFlag();
  RemoveFlag();
  Uncover()
}

// prints the row of a board while translating the CellState Types to the corresponding string representation/symbol
// if a there aren't any mines around a cell, the field is displayed as an empty field (-)
def printRow(row: List[CellState]): String = {
  with Formatted::formatting;
  var out: String = ""
  row.foreach{ c =>
    c match {
      case Hidden() => out = out ++ "  " ++ Formatted::colored("H", Color::BLACK)
      case Number(0) => out = out ++ Formatted::colored("  -", Color::CYAN)
      case Number(n) => out = out ++ "  " ++ show(n)
      case Mine() => out = out ++ Formatted::colored("  M", Color::YELLOW)
      case Flag() => out = out ++ "  F".red // toString('ðŸš©') 
    }
  }
  out
}

// prints a given board in a nice way
def printBoard(board: Board): Unit = {
  val boardsize = board.size
  var rowIndices = "    "
  var border = "  "
  each(0, boardsize) {n =>
    rowIndices = rowIndices ++ show(n) ++ "  "
    border = border ++ "---"
  }
  println(rowIndices)
  println(border)
  each(0, boardsize) {n =>
    with on[OutOfBounds].panic
    val row: List[CellState] = board.get(n)
    val s: String = printRow(row)
    println(show(n) ++ "|" ++ s)   
  }
  println("")
}

// update the state of a cell at index [row_index][col_index] with the given new state
// updating here means returns a new board with the updated cell
def updateCell(board: Board, row_index: Int, col_index: Int, state: CellState): Board = {
  board.updateAt(row_index){r =>
    r.updateAt(col_index){s => state}}
}

// generates a new board by placing the given number of mines randomly on a new board of given size
// all cells not containing a mine will be Number() cells holding the number of mines surrounding the cell
def generateBoard(size: Int, numMines: Int): Board/{invalidInput} = {
  if(numMines > size*size){
    do invalidInput("invalid input: number of mines mustn't exceed the number of cells")
  }
  if(size < 1){
    do invalidInput("invalid input: size must be a positive number")
  }
  if(numMines < 0){
    do invalidInput("invalid input: number of mines musn't be negative")
  }
  with on[OutOfBounds].panic
  var board: Board = fill[List[CellState]](size, fill[CellState](size, Number(0))) 

  // Mine Placement
  var minesPlaced = 0

  while (minesPlaced < numMines) {
    val r: Int = randomInt(0, size)
    val c: Int = randomInt(0, size)
    val cell: CellState = board.get(r).get(c)

    cell match {
      case Number(0) => 
      board = updateCell(board, r, c, Mine())
      minesPlaced = minesPlaced + 1
      case _ => board = board // TODO: better way to do this?
    }
  }

  // Correct Placement of Numbers based on given Mine Placement
  board.foreachIndex{ (row_idx, row) =>
    row.foreachIndex{ (col_idx, col) => 
      if(isMine(board, row_idx, col_idx) == false){
        val mines = countAdjacentMines(board, row_idx, col_idx)
        board = board.updateCell(row_idx, col_idx, Number(mines))
      }
    }
  }
  board
}

def generatePlayerBoard(size: Int): Board = {
  fill[List[CellState]](size, fill[CellState](size, Hidden())) 
}

// count the number of mines surrounding a cell (max: 8)
def countAdjacentMines(board: Board, row: Int, col: Int): Int = {
  val size = board.size
  var count = 0
  val dx = [-1, -1, -1, 0, 0, 1, 1, 1]
  val dy = [-1, 0, 1, -1, 1, -1, 0, 1]

  with on[OutOfBounds].panic
  each(0,8){ n => 
    val newRow = row + dx.get(n)
    val newCol = col + dy.get(n)
    if(isValidIndex(size, newRow, newCol) == true) {
      if(isMine(board, newRow, newCol) == true){
        count = count + 1
      }
    }
  }
  count
}

// check if a given index [row][col] is a valid index on an arbitrary board of given size
def isValidIndex(size: Int, row: Int, col: Int): Bool = {
  (row >= 0) && (row < size) && (col >= 0) && (col < size)
}

// check if a cell with index [row][col] on a given board is a mine
def isMine(board: Board, row: Int, col: Int): Bool = {
  with on[OutOfBounds].panic
  board.get(row).get(col) match {
    case Mine() => true
    case _ => false
  }
}

// validate a given move of the player by comparing the desired move to the current player board
def isValidMove(board: Board, row: Int, col: Int, action: Action): Bool/{invalidInput} = {
  if(isValidIndex(board.size, row, col) == false){
    do invalidInput("invalid input: the coordinates of the given input are not within the board")
    false
  } 
  else {// index is valid for board
    with on[OutOfBounds].panic
    val cellState = board.get(row).get(col)
    cellState match {
      case Hidden() => {action match {
        case RemoveFlag() => do invalidInput("invalid input: cell isn't flagged and therefore can't be unflagged"); false
        case _ => true
      }}
      case Number(n) => do invalidInput("invalid input: cells already uncovered can't be modified"); false
      case Flag() => {action match {
        case AddFlag() => do invalidInput("invalid input: cell is already flagged and therefore can't be flagged again"); false
        case RemoveFlag() => true
        case Uncover() => true
      }}
      case Mine() => do invalidInput("TODO, Mine on player's board not possible, something went wrong"); false
    }
  }
}

// recursive algorithm to uncover multiple cells at once based on one move and return the resulting Board
// assuming the move of the first call of floodFill is a valid one
def floodFill(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, visited: List[(Int, Int)]): Board = {
  if(visited.any{el => el.first == row && el.second == col}) playerBoard
  else {
    with on[OutOfBounds].panic
    solutionBoard.get(row).get(col) match {
      case Number(0) => // If the cell has no adjacent mines, continue flood-fill
        val newVisited = visited.append([(row, col)])
        val newBoard = playerBoard.updateCell(row, col, Number(0)) // Replace with uncovered
        val dx = [-1, -1, -1, 0, 0, 1, 1, 1]
        val dy = [-1, 0, 1, -1, 1, -1, 0, 1]
        var validCells = []
        each(0,8){ n => 
          val newRow = row + dx.get(n)
          val newCol = col + dy.get(n)
          if(isValidIndex(playerBoard.size, newRow, newCol) == true) {
            validCells = validCells.append([(newRow, newCol)])
          }
        }
        validCells.foldLeft(newBoard) { (currentBoard, d) => floodFill(currentBoard, solutionBoard, d.first, d.second, newVisited)}
      case Number(n) => playerBoard.updateCell(row, col, solutionBoard.get(row).get(col))
        // Stop flood-fill at numbered fields, but uncover the cell
      case _ => playerBoard // Stop flood-fill at mines or hidden/ flagged cells, letting them stay hidden
    }
  }
}

// perform the given move by returning the new Board after the given move
// uses the flood fill algorithm to recursively uncover adjacent Number cells once an empty cell is uncovered
def makeMove(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, action: Action): Board = {
  var newPlayerBoard = playerBoard
  try {
    if(isValidMove(playerBoard, row, col, action) == false){
      playerBoard
    } else {
      with on[OutOfBounds].panic
      val cellState = solutionBoard.get(row).get(col)
      action match {
        case AddFlag() => newPlayerBoard = newPlayerBoard.updateCell(row, col, Flag())
        case RemoveFlag() => newPlayerBoard = newPlayerBoard.updateCell(row, col, Hidden())
        case Uncover() => newPlayerBoard = newPlayerBoard.floodFill(solutionBoard, row, col, [])
      }
      newPlayerBoard
    }
  } with invalidInput{ m =>
    println(m)
    playerBoard
  }
}

val exampleBoard2x2: Board = [
  [Number(0), Number(1)],
  [Flag(), Number(0)]
]

val exampleBoard4x4: Board = [
  [Number(0), Number(1), Mine(), Flag()],
  [Flag(), Number(0), Number(2), Number(3)],
  [Number(0), Number(0), Number(2), Number(0)],
  [Number(0), Flag(), Mine(), Number(0)]
]

val examplePlayerBoard4x4: Board = [
  [Number(0), Number(1), Hidden(), Hidden()],
  [Flag(), Number(0), Number(2), Number(3)],
  [Number(0), Number(0), Number(2), Number(0)],
  [Number(0), Flag(), Hidden(), Number(0)]
]

val exampleSolutionBoard: Board = [
  [Number(1), Number(1), Number(1), Number(0)],
  [Number(1), Mine(), Number(1), Number(0)],
  [Number(1), Number(1), Number(2), Number(1)],
  [Number(0), Number(0), Number(1), Mine()]
]

def main(): Unit = {
  val solutionBoard = exampleSolutionBoard
  printBoard(solutionBoard)
  var playerBoard = generatePlayerBoard(solutionBoard.size)
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 0, 3, Uncover())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 0, 1, RemoveFlag())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 0, 1, AddFlag())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 0, 1, RemoveFlag())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 1, 1, AddFlag())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 0, 3, Uncover())
  printBoard(playerBoard)
}



