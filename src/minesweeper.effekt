module src/minesweeper
import tty

extern js"""
  function getRandomInt(min, max) {
    const minCeiled = Math.ceil(min);
    const maxFloored = Math.floor(max);
    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive
  }
"""

extern def randomInt(minInclusive: Int, maxExclusive: Int): Int =
  js"getRandomInt(${minInclusive}, ${maxExclusive})"

effect invalidInput(msg: String): Unit

// custom type to represent the state of a cell of the Board
// Invariants: Player board has only Hidden, Number and Flag cells
//             Solution board has only Number and Mine cells
type CellState {
  Hidden(); // Hidden cells are only possible on the board of the player
  EmptyCell(); 
  Number(n: Int);
  Mine(); // Mines won't be shown on the board of the player. If a cell with a mine isn't Hidden, the game is lost
  Flag()
}

type Board = List[List[CellState]]

// prints the row of a board while translating the CellState Types to the corresponding string representation/symbol
def printRow(row: List[CellState]): String = {
  with Formatted::formatting;
  var out: String = ""
  row.foreach{ c =>
    c match {
      case Hidden() => out = out ++ "  " ++ Formatted::colored("H", Color::BLACK)
      case EmptyCell() => out = out ++ Formatted::colored("  -", Color::CYAN)
      case Number(n) => out = out ++ "  " ++ show(n)
      case Mine() => out = out ++ Formatted::colored("  M", Color::YELLOW)
      case Flag() => out = out ++ "  F".red // toString('ðŸš©') 
    }
  }
  out
}

// prints a given board in a nice way
def printBoard(board: Board): Unit = {
  val boardsize = board.size
  var rowIndices = "   "
  each(0, boardsize) {n =>
    rowIndices = rowIndices ++ show(n) ++ "  "
  }
  println(rowIndices)
  each(0, boardsize) {n =>
    with on[OutOfBounds].panic
    val row: List[CellState] = board.get(n)
    val s: String = printRow(row)
    println(show(n) ++ s)   
  }
  println("")
}

// update the state of a cell at index [row_index][col_index] with the given new state
// updating here means returns a new board with the updated cell
def updateCell(board: Board, row_index: Int, col_index: Int, state: CellState): Board = {
  board.updateAt(row_index){r =>
    r.updateAt(col_index){s => state}}
}

// generates a new board by placing the given number of mines randomly on a new board of given size
// all cells not containing a mine will be Number() cells holding the number of mines surrounding the cell
def generateBoard(size: Int, numMines: Int): Board/{invalidInput} = {
  if(numMines > size*size){
    do invalidInput("invalid input: number of mines mustn't exceed the number of cells")
  }
  if(size < 1){
    do invalidInput("invalid input: size must be a positive number")
  }
  if(numMines < 0){
    do invalidInput("invalid input: number of mines musn't be negative")
  }
  with on[OutOfBounds].panic
  var board: Board = fill[List[CellState]](size, fill[CellState](size, EmptyCell())) 

  // Mine Placement
  var minesPlaced = 0

  while (minesPlaced < numMines) {
    val r: Int = randomInt(0, size)
    val c: Int = randomInt(0, size)
    val cell: CellState = board.get(r).get(c)

    cell match {
      case EmptyCell() => 
      board = updateCell(board, r, c, Mine())
      minesPlaced = minesPlaced + 1
      case _ => board = board // TODO: better way to do this?
    }
  }

  // Correct Placement of Numbers based on given Mine Placement
  board.foreachIndex{ (row_idx, row) =>
    row.foreachIndex{ (col_idx, col) => 
      if(isMine(board, row_idx, col_idx) == false){
        val mines = countAdjacentMines(board, row_idx, col_idx)
        board = board.updateCell(row_idx, col_idx, Number(mines))
      }
    }
  }
  board
}

// count the number of mines surrounding a cell (max: 8)
def countAdjacentMines(board: Board, row: Int, col: Int): Int = {
  val size = board.size
  var count = 0
  val dx = [-1, -1, -1, 0, 0, 1, 1, 1]
  val dy = [-1, 0, 1, -1, 1, -1, 0, 1]

  with on[OutOfBounds].panic
  each(0,8){ n => 
    val newRow = row + dx.get(n)
    val newCol = col + dy.get(n)
    if(isValidIndex(size, newRow, newCol) == true) {
      if(isMine(board, newRow, newCol) == true){
        count = count + 1
      }
    }
  }
  count
}

// check if a given index [row][col] is a valid index on an arbitrary board of given size
def isValidIndex(size: Int, row: Int, col: Int): Bool = {
  (row >= 0) && (row < size) && (col >= 0) && (col < size)
}

// check if a cell with index [row][col] on a given board is a mine
def isMine(board: Board, row: Int, col: Int): Bool = {
  with on[OutOfBounds].panic
  board.get(row).get(col) match {
    case Mine() => true
    case _ => false
  }
}


val exampleBoard2x2: Board = [
  [EmptyCell(), Number(1)],
  [Flag(), EmptyCell()]
]

val exampleBoard4x4: Board = [
  [EmptyCell(), Number(1), Mine(), Flag()],
  [Flag(), EmptyCell(), Number(2), Number(3)],
  [EmptyCell(), EmptyCell(), Number(2), EmptyCell()],
  [EmptyCell(), Flag(), Mine(), EmptyCell()]
]

val examplePlayerBoard4x4: Board = [
  [EmptyCell(), Number(1), Hidden(), Hidden()],
  [Flag(), EmptyCell(), Number(2), Number(3)],
  [EmptyCell(), EmptyCell(), Number(2), EmptyCell()],
  [EmptyCell(), Flag(), Hidden(), EmptyCell()]
]

def main(): Unit = {
  //printBoard(examplePlayerBoard4x4)
  //printBoard(examplePlayerBoard4x4.updateCell(0, 3, Flag()))
  try{
    printBoard(generateBoard(5,3))
  } with invalidInput{m =>
  println(m)}
}



