module src/minesweeper
import string/tty

val BOARDSIZE: Int = 4

// custom type to represent the state of a cell of the Board
type CellState {
  Hidden(); // Hidden cells are only possible on the board of the player
  EmptyCell(); 
  Number(n: Int);
  Mine();
  Flag()
}

type Board = List[List[CellState]]

// prints the row of a board while translating the CellState Types to the corresponding string representation/symbol
def printRow(row: List[CellState]): String = {
  with Formatted::formatting;
  var out: String = ""
  row.foreach{ c =>
    c match {
      case Hidden() => out = out ++ "  " ++ Formatted::colored("H", ANSI::BLACK)
      case EmptyCell() => out = out ++ Formatted::colored("  -", ANSI::CYAN)
      case Number(n) => out = out ++ "  " ++ show(n)
      case Mine() => out = out ++ Formatted::colored("  B", ANSI::YELLOW)
      case Flag() => out = out ++ "  F".red // toString('ðŸš©') 
    }
  }
  out
}

def printBoard(board: Board): Unit = {
  var rowIndices = "   "
  each(0, BOARDSIZE) {n =>
    rowIndices = rowIndices ++ show(n) ++ "  "
  }
  println(rowIndices)
  each(0, BOARDSIZE) {n =>
    with on[OutOfBounds].panic
    val row: List[CellState] = board.get(n)
    val s: String = printRow(row)
    println(show(n) ++ s)   
  }
  println("")
}

def updateCell(board: Board, row_index: Int, col_index: Int, state: CellState): Board = {
  board.updateAt(row_index){r =>
    r.updateAt(col_index){s => state}}
}

val exampleBoard2x2: Board = [
  [EmptyCell(), Number(1)],
  [Flag(), EmptyCell()]
]

val exampleBoard4x4: Board = [
  [EmptyCell(), Number(1), Mine(), Flag()],
  [Flag(), EmptyCell(), Number(2), Number(3)],
  [EmptyCell(), EmptyCell(), Number(2), EmptyCell()],
  [EmptyCell(), Flag(), Mine(), EmptyCell()]
]

val examplePlayerBoard4x4: Board = [
  [EmptyCell(), Number(1), Hidden(), Hidden()],
  [Flag(), EmptyCell(), Number(2), Number(3)],
  [EmptyCell(), EmptyCell(), Number(2), EmptyCell()],
  [EmptyCell(), Flag(), Hidden(), EmptyCell()]
]

def main(): Unit = {
  printBoard(examplePlayerBoard4x4)
  printBoard(examplePlayerBoard4x4.updateCell(0, 3, Flag()))
}



