import src/utils
import stream

// Check if a position exists in array
  def arrayContainsPos(arr: Array[Pos], pos: Pos): Bool = {
    var found = false
    arr.foreachIndex{ (i, p) =>
      if(posEquals(p, pos)) {
        found = true
      }
    }
    found
  }

  // Count positions in array that match predicate
  def countInArray(arr: Array[Pos]){predicate: Pos => Bool}: Int = {
    var count = 0
    arr.foreach{ pos =>
      if(predicate(pos)) {
        count = count + 1
      }
    }
    count
  }


// Generates a list of Rules for solving the game based on the current player board as well as the unique positions among all rules
// A rule is created for each Number() cell on the board that has at least one `Hidden` or `Flagged` neighbour 
// because only this type of cell provides new information needed for solving .
// Each rule is of the form (n, neighbours) while
//  - `n` represents the number of mines surrounding a given `Number` cell
//  - `neighbours` A list of all Hidden() positions where these `n` mines could potentially be located 
// Example:
// Given a player board where the cell at position (1, 1) contains `Number(1)` and has two `Hidden` neighbors,
// the function will create a rule like `Rule(1, List(Pos(0, 1), Pos(2, 2)))` representing that exactly one of the two positions in the list
// has to be a Mine
// These rules can then later be used to compute probabilities for cells being a mine by applying logical deduction 
def generateRulesAndUniquePos(playerBoard: Board): (List[Rule], List[Pos]) = {
  var rules: List[Rule] = []
  var uniquePositions: List[Pos] = []

  playerBoard.foreachIndex{ (row_idx, row) =>
    row.foreachIndex{ (col_idx, col) => 
      with on[OutOfBounds].panic
      playerBoard.get(row_idx).get(col_idx) match {
        case Number(n) => // cells with Numbers can be interesting (if they have >= 1 Hidden neighbour)
          val neighbours = collectList[Pos]{neighboursOf(playerBoard.size,Pos(row_idx,col_idx), 1)}
          var hiddenNeighbours: List[Pos] = []
          neighbours.foreach{nb => 
            with on[OutOfBounds].panic
            playerBoard.get(nb.r).get(nb.c) match {
              case Hidden() => {
                hiddenNeighbours = Cons(nb, hiddenNeighbours)
                if(uniquePositions.all{p => not(posEquals(p,nb))}) {
                    uniquePositions = Cons(nb, uniquePositions)
                }
              }
              case Flagged() => {
                hiddenNeighbours = Cons(nb, hiddenNeighbours)
                if(uniquePositions.all{p => not(posEquals(p,nb))}) {
                    uniquePositions = Cons(nb, uniquePositions)
                }
              }
              case _ => hiddenNeighbours = hiddenNeighbours
            }
          }
          if(not(hiddenNeighbours.isEmpty)) rules = Cons(Rule(n, hiddenNeighbours), rules)
        case _ => rules = rules // all cells except Number() cells aren't interesting since they don't provide information for solving
      }
    }
  }
  (rules, uniquePositions)
}


// Main function to calculate the probabilities of each relevant cell (= Hidden and neighbour of a Number cell) being a mine
// Relevant means it provides new information for solving. 
// Cells with only uncovered neighbours or only hidden/flagged neighbours don't provide any new information and can be ignored
def calculateProbabilities(playerBoard: Board): List[(Pos, Double)] = {
  val (rules, uniquePositions) = generateRulesAndUniquePos(playerBoard)
  println("rules size: " ++ show(rules.size))

  // Generate valid configurations using arrays for position checking
  def generateValidConfigurations(positions: List[Pos], rules: List[Rule]): List[Array[Pos]] = {
    // Convert rule positions to arrays for faster checking
    val ruleArrays = rules.map{ rule => 
      (rule.mineCount, fromList(rule.positions))
    }
    // Checks if a partial configuration could potentially lead to a valid solution
    // Ensures we don't exceed the required mine count for any rule
    def isPartiallyValid(current: Array[Pos]): Bool = {
      ruleArrays.all{ case (mineCount, positions) =>
        val count = countInArray(current){pos => 
          arrayContainsPos(positions, pos)
        }
        count <= mineCount
      }
    }

    def generate(remaining: List[Pos], currentSize: Int, current: Array[Pos]): List[Array[Pos]] = {
      var c: Array[Pos] = current
      if(not(isPartiallyValid(c))) []
      else
    remaining match {
        case Nil() => 
          // Check if configuration satisfies all rules exactly
          val valid = ruleArrays.all{ case (mineCount, positions) =>
            val count = countInArray(c){ pos => 
              arrayContainsPos(positions, pos)
            }
            count == mineCount
          }
          if(valid) [c] else []
          
        case Cons(pos, rest) =>
          // Try without current position
          val withoutPos = generate(rest, currentSize, c)
          
          // Try with current position
          with on[OutOfBounds].panic
          c.set(currentSize, pos)
          val withPos = generate(rest, currentSize + 1, c)
          
          withoutPos.append(withPos)
      }
    }
    
    // Initialize array for generating configurations
    val maxSize = positions.size
    val initialArray = array(maxSize, Pos(-1,-1))
    generate(positions, 0, initialArray)
  }

  val configs = generateValidConfigurations(uniquePositions, rules)
  
  if(configs.isEmpty) []
  else
  
  // Calculate probabilities using position array for faster lookups
  uniquePositions.map{ pos =>
    val mineCount = configs.count{ config => 
      arrayContainsPos(config, pos)
    }
    (pos, mineCount.toDouble / configs.size.toDouble)
  }
}