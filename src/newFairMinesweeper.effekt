module src/minesweeper
import tty
import io/console
import src/utils
import stream
import src/fairRules
import src/safeMoves
//import set

// Generates a new solution board of size `size` by placing `numMines` mines randomly on a new, empty board of the given size
// All cells not containing a mine will be assigned a number representing the count of adjacent mines
// Ensures that the first move is safe, meaning the cell at this position does not contain a mine and no cell adjacent to the first move is a mine
def generateSolutionBoard(size: Int, numMines: Int, firstMove: Pos): Board/{invalidInput} = {
  if(numMines > size*size - 9){ // TODO move this check earlier in the playMinesweeper
    do invalidInput("invalid input: number of mines mustn't exceed the number of cells")
  }
  if(size < 1){
    do invalidInput("invalid input: size must be a positive number")
  }
  if(numMines < 0){
    do invalidInput("invalid input: number of mines musn't be negative")
  }
  var board: Board = fill[List[CellState]](size, fill[CellState](size, Number(0))) 
  val safeZone: List[Pos] = Cons(firstMove, collectList[Pos]{neighboursOf(size, firstMove, 1)})

  // Mine Placement
  var minesPlaced = 0
  // var minedPositions = emptyGeneric[Pos] // Track the positions where mines are placed TODO uncomment when Set in Effekt
  while (minesPlaced < numMines) {
    val pos = Pos(randomInt(0, size), randomInt(0, size))
    with on[OutOfBounds].panic
    board.get(pos.r).get(pos.c)match {
      case Number(0) => 
        if(safeZone.any{p => p.posEquals(pos)} == false){
          board = updateCell(board, pos, Mine())
          minesPlaced = minesPlaced + 1
        }
      case _ => board = board // TODO: better way to do this?
    }
    /*
    // Ensure the position is not already mined, and not in the safe zone
    if (minedPositions.contains(pos) == false && safeZone.any{p => p.posEquals(Pos(row,col))} == false) {
      board = updateCell(board, pos, Mine()) // Place a mine
      minedPositions.insert(pos) // Mark the position as mined
      minesPlaced = minesPlaced + 1
    }*/
  }
  // Correct Placement of Numbers based on given Mine Placement
  board.foreachIndex{ (row_idx, row) =>
    row.foreachIndex{ (col_idx, col) => 
      if(isMine(board, Pos(row_idx, col_idx)) == false){
        val mines = countAdjacentMines(board, Pos(row_idx, col_idx))
        board = board.updateCell(Pos(row_idx, col_idx), Number(mines))
      }
    }
  }
  board
}

// Generates a new, board of size `size` containing only Hidden() cells to represent the initial state of the Player
def generatePlayerBoard(size: Int): Board = {
  fill[List[CellState]](size, fill[CellState](size, Hidden())) 
}

// Validates a given player's move based on the current state of the player board
def isValidPlayerMove(playerBoard: Board, pos:Pos, action: Action): Bool/{invalidInput} = {
  if(not(isValidIndex(playerBoard.size, pos))){
    do invalidInput("invalid input: given coordinates (row,col) = (" ++ show(pos.r) ++ "," ++ show(pos.c) ++ ") " ++ "are not within the board of size " ++ show(playerBoard.size)); false
  } 
  else {// index is valid for board
    with on[OutOfBounds].panic
    playerBoard.get(pos.r).get(pos.c) match {
      case Number(n) => do invalidInput("invalid input: cells already uncovered can't be modified"); false
      case Mine() => do invalidInput("Invalid state: Player board can't have uncovered mines"); false
      case _ => true //for Hidden and Flagged cells, all actions are possible
    }
  }
}

// Performs a flood-fill to uncover multiple cells on the player's board based on a given move and returns the new Board as well as the visited cells
// precondition: the move at `pos` of the first call of floodFill is a valid one
// Recursively uncovers all connected empty cells (`Number(0)`)
// Stops recursive uncovering when a cell contains a number greater than 0, but still uncovers this cell
// Does not uncover mines
def floodFill(playerBoard: Board, solutionBoard: Board, pos: Pos): Board = {
  def floodFillworker(playerBoard: Board, solutionBoard: Board, pos: Pos, visited: List[Pos]): (Board, List[Pos]) = {
    if(visited.any{cell => cell.posEquals(pos)}){// if current cell already visited
      (playerBoard, visited)//visited stays the same (acts like a Set) TODO change into a Set once possible
    } 
    else{
    val updatedVisited = Cons(pos, visited)
    
    with on[OutOfBounds].panic
    val cellStateSolution = solutionBoard.get(pos.r).get(pos.c)
    val updatedBoard = playerBoard.updateCell(pos,  cellStateSolution) 

    cellStateSolution match {
      case Number(0) => // Collect non-diagonal neighbors (they can't be mines) and recursively apply flood-fill
        val neighbours: List[Pos] = collectList{nonDiagonalNeighboursOf(playerBoard.size,pos)}
        neighbours.foldLeft((updatedBoard, updatedVisited)){(acc, neighbour) => 
          val (currentBoard, currentVisited) = acc
          floodFillworker(currentBoard, solutionBoard, neighbour, currentVisited)
        }
      case Number(n) => (updatedBoard, updatedVisited) // in case of Numbers > 0 still uncover them but then stop recursion
      case _ => (playerBoard, updatedVisited) // Do not uncover mines, keep the board unchanged
      }
    }
  }
  floodFillworker(playerBoard, solutionBoard, pos, []).first
}

// perform the given move by returning the new Player Board after the given move. Also returns the solution Board 
// which get's modified only if a mine has to be replaced due to fair rules
// uses the flood fill algorithm to recursively uncover adjacent Number cells once an empty cell is uncovered
def makeMove(playerBoard: Board, solutionBoard: Board, pos: Pos, action: Action): (Board, Board)/{gameOver, reduceMineCount} = {
  var newPlayerBoard = playerBoard
  var newSolutionBoard = solutionBoard
  try {
    if(isValidPlayerMove(playerBoard, pos, action) == false){
      (playerBoard, solutionBoard)
    } else {
      with on[OutOfBounds].panic

      val cellStateSolution = solutionBoard.get(pos.r).get(pos.c)
      val cellStatePlayer = playerBoard.get(pos.r).get(pos.c)
      action match {
        case Flag() => cellStatePlayer match { // move is valid => only first two cases (Hidden/Flagged) possible
          case Hidden() => newPlayerBoard = newPlayerBoard.updateCell(pos, Flagged())
          case Flagged() => newPlayerBoard = newPlayerBoard.updateCell(pos, Hidden())
          case _ => do invalidInput("TODO not possible because we already checked the move was valid")
        }
        case Uncover() => /*cellStateSolution match {
          case Mine() => do gameOver(solutionBoard)
          case _ => 
            val (updatedPlayerBoard, _) = newPlayerBoard.floodFill(solutionBoard, pos,[])
            newPlayerBoard = updatedPlayerBoard
        }*/
          {
            if(replacementNeeded(newSolutionBoard, newPlayerBoard, pos)){
              println("make move: replacement needed")
              try{val newMinePos = findCandidate(solutionBoard, playerBoard, pos)
              val newBoards = replaceMine(solutionBoard, playerBoard, pos, newMinePos)
              newSolutionBoard = newBoards.first
              newPlayerBoard = newBoards.second
              println("make move: updated solution board:")
              printBoard(newSolutionBoard)
              println("makeMove: updated player Board:")
              printBoard(newPlayerBoard)} with reduceMineCount{do reduceMineCount()}
            }
            val newcellStateSolution = newSolutionBoard.get(pos.r).get(pos.c)
            newcellStateSolution match {
              case Mine() => do gameOver("you should have known this was a mine", solutionBoard) // TODO not possible?
              case _ => newPlayerBoard = newPlayerBoard.floodFill(newSolutionBoard, pos)
        }
          }
      }
      (newPlayerBoard, newSolutionBoard)
    }
  } with invalidInput{ m =>
    println(m)
    (playerBoard, solutionBoard)
  }
}

def parseCommand(command: List[String], boardSize: Int): Command/{invalidInput} = {
  val len = command.size
  var cmd = Help() // TODO other way to initialize this?
  with on[OutOfBounds].panic
  if(len == 1){
    val a = command.get(0)
    if(a == "h"){
      cmd = Help()
    }
    else if(a == "r"){cmd = Rules()}

    else if(a == "q"){
      cmd = Quit()
    }
    else{
      do invalidInput("invalid input: you didn't type a valid action :(" )
      cmd = Help()
    }
  }
  else if(len == 2){
    do invalidInput("invalid input: col coordinate is missing")
    cmd = Help()
  }
  else if(len == 3){
    with on[OutOfBounds].panic
    val a: String = command.get(0)
    val xString: String = command.get(1)
    with on[WrongFormat].default{cmd = Help()}
    val x: Int = xString.toInt()
    val yString: String = command.get(2)
    val y: Int = yString.toInt()

    if(isValidIndex(boardSize, Pos(x, y))){
      if(a == "f"){
        cmd = PerformAction(Flag(),Pos(x,y))
      }
      else {
        if(a == "u"){
        cmd = PerformAction(Uncover(),Pos(x,y))
      }
       else {do invalidInput("invalid input: you didn't type a correct action" ++ helpMessage)}
    }}
    else{do invalidInput("invalid input: given coordinates (row,col) = (" ++ show(x) ++ "," ++ show(y) ++ ") " ++ "are not within the board of size " ++ show(boardSize))}
  }
  else{do invalidInput("TODO: wrong number of actions not possible?!")}

  cmd
}

def getFirstMove(boardSize: Int): Pos = {
  var firstMove = Pos(-1,-1)
  println("not updated yet" ++ genericShow(firstMove))
  while(firstMove.r == -1 && firstMove.c == -1){
    println("To make your first move, enter the number of the row you want to make your move at")
    with console;
    val row = do readLine()
    println("Now enter the number of the column you want to make your move at")
    val col = do readLine()
    println("here")
    with on[WrongFormat].default{()}
    val maybeMove = Pos(row.toInt, col.toInt)
    println("got maybe move" ++ genericShow(maybeMove))

    if(isValidIndex(boardSize, maybeMove)){
      firstMove = maybeMove
      println("updated" ++ genericShow(firstMove))
    }
  }
  firstMove
}

def playMinesweeper(boardSize: Int, numMines: Int): Unit = {
  var mineCount = numMines
  println("Welcome to Fair Minesweeper!")
  println("To start a new game, press Enter on your keyboard")
  with console;
  do readLine()
  var playerBoard = generatePlayerBoard(boardSize)
  printBoard(playerBoard)
  val firstMove = getFirstMove(boardSize)
  try{
  var solutionBoard = generateSolutionBoard(boardSize, numMines, firstMove)
  printBoard(solutionBoard)

  //playerBoard = playerBoard.updateCell(firstMove.first, firstMove.second, Number(0)) // safe because we handle this move in generateSolutionBoard
  playerBoard = playerBoard.floodFill(solutionBoard, firstMove)
  printBoard(playerBoard)

  //TODO remove
  /*println("Interesting cells: ")
  val interest = interestingCells(playerBoard)
  println(genericShow(interest))
  println(" ")
  println("Candidate cells: ")
  println(genericShow(candidateCells(playerBoard, interest)))*/
  //println(genericShow(calculateProbabilities(playerBoard)))
  // 
  println(helpMessage)

  var end = false
  while(end != true){
  var commands = []
  with console;
  val action = do readLine()
  commands = commands.append([action])
  if(action == "u" || action == "f"){
    println("type the number of the row you want to make your move at")
    val x = do readLine()
    commands = commands.append([x])
    println("type the number of the col you want to make your move at")
    val y = do readLine()
    commands = commands.append([y])
  }
  val cmd = parseCommand(commands, boardSize)
  
  cmd match {
    case PerformAction(a, Pos(x,y)) => try {
      try{
      val newBoards = makeMove(playerBoard, solutionBoard, Pos(x, y), a)
      playerBoard = newBoards.first
      solutionBoard = newBoards.second
      printBoard(playerBoard)} with reduceMineCount{mineCount = mineCount - 1}
    }with gameOver{(why, b) =>
    println(why)
    println(gameOverMessage)
    println("This is the solution board:")
    printBoard(b)
    end = true}
    case Help() => println(helpMessage)
    case Quit() => end = true//println("TODO Quit the game"); end = true
    case Rules() => println(genericShow(safeMoves(playerBoard)))//println(genericShow(calculateProbabilities(playerBoard)))
    }
    if(mineCount == playerBoard.join.count{cell => cell match {
      case Number(n) => false
      case _ => true
      }})try{do winGame(playerBoard)} with winGame{b => println(wonMessage)}
  }} with invalidInput{m => println(m); resume(())}
}

def main(): Unit = {
  playMinesweeper(5,10)
}



