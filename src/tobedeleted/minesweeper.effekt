module src/minesweeper
import tty
import io/console
import src/utils
import stream

extern js"""
  function getRandomInt(min, max) {
    const minCeiled = Math.ceil(min);
    const maxFloored = Math.floor(max);
    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive
  }
"""

extern def randomInt(minInclusive: Int, maxExclusive: Int): Int =
  js"getRandomInt(${minInclusive}, ${maxExclusive})"

// update the state of a cell at index [row_index][col_index] with the given new state
// updating here means returns a new board with the updated cell
def updateCell(board: Board, row_index: Int, col_index: Int, state: CellState): Board = {
  board.updateAt(row_index){r =>
    r.updateAt(col_index){s => state}}
}

// generates a new board by placing the given number of mines randomly on a new board of given size
// all cells not containing a mine will be Number() cells holding the number of mines surrounding the cell
def generateBoard(size: Int, numMines: Int): Board/{invalidInput} = {
  if(numMines > size*size){
    do invalidInput("invalid input: number of mines mustn't exceed the number of cells")
  }
  if(size < 1){
    do invalidInput("invalid input: size must be a positive number")
  }
  if(numMines < 0){
    do invalidInput("invalid input: number of mines musn't be negative")
  }
  with on[OutOfBounds].panic
  var board: Board = fill[List[CellState]](size, fill[CellState](size, Number(0))) 

  // Mine Placement
  var minesPlaced = 0

  while (minesPlaced < numMines) {
    val r: Int = randomInt(0, size)
    val c: Int = randomInt(0, size)
    val cell: CellState = board.get(r).get(c)

    cell match {
      case Number(0) => 
      board = updateCell(board, r, c, Mine())
      minesPlaced = minesPlaced + 1
      case _ => board = board // TODO: better way to do this?
    }
  }

  // Correct Placement of Numbers based on given Mine Placement
  board.foreachIndex{ (row_idx, row) =>
    row.foreachIndex{ (col_idx, col) => 
      if(isMine(board, row_idx, col_idx) == false){
        val mines = countAdjacentMines(board, row_idx, col_idx)
        board = board.updateCell(row_idx, col_idx, Number(mines))
      }
    }
  }
  board
}

def generatePlayerBoard(size: Int): Board = {
  fill[List[CellState]](size, fill[CellState](size, Hidden())) 
}

// count the number of mines surrounding a cell (max: 8)
def countAdjacentMines(board: Board, row: Int, col: Int): Int = {
  val size = board.size
  var count = 0
  val dx = [-1, -1, -1, 0, 0, 1, 1, 1]
  val dy = [-1, 0, 1, -1, 1, -1, 0, 1]

  with on[OutOfBounds].panic
  each(0,8){ n => 
    val newRow = row + dx.get(n)
    val newCol = col + dy.get(n)
    if(isValidIndex(size, newRow, newCol) == true) {
      if(isMine(board, newRow, newCol) == true){
        count = count + 1
      }
    }
  }
  count
}

// check if a given index [row][col] is a valid index on an arbitrary board of given size
def isValidIndex(size: Int, row: Int, col: Int): Bool = {
  (row >= 0) && (row < size) && (col >= 0) && (col < size)
}

// check if a cell with index [row][col] on a given board is a mine
def isMine(board: Board, row: Int, col: Int): Bool = {
  with on[OutOfBounds].panic
  board.get(row).get(col) match {
    case Mine() => true
    case _ => false
  }
}

// validate a given move of the player by comparing the desired move to the current player board
def isValidMove(board: Board, row: Int, col: Int, action: Action): Bool/{invalidInput} = {
  if(isValidIndex(board.size, row, col) == false){
    do invalidInput("invalid input: given coordinates (row,col) = (" ++ show(row) ++ "," ++ show(col) ++ ") " ++ "are not within the board of size " ++ show(board.size))
    false
  } 
  else {// index is valid for board
    with on[OutOfBounds].panic
    val cellState = board.get(row).get(col)
    cellState match {
      case Number(n) => do invalidInput("invalid input: cells already uncovered can't be modified"); false
      case Mine() => do invalidInput("TODO Case not possible: player board can't have mines"); false
      case _ => true //for Hidden and Flagged cells, all actions are possible
    }
  }
}

// recursive algorithm to uncover multiple cells at once based on one move and return the resulting Board
// assuming the move of the first call of floodFill is a valid one
def floodFill(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, visited: List[(Int, Int)]): Board = {
  val dx = [-1, -1, -1, 0, 0, 1, 1, 1]
  val dy = [-1, 0, 1, -1, 1, -1, 0, 1]
  if(visited.any{el => el.first == row && el.second == col}) playerBoard
  else {
    with on[OutOfBounds].panic
    val cellStateSolution = solutionBoard.get(row).get(col)
    cellStateSolution match {
      case Number(0) => // If the cell has no adjacent mines, continue flood-fill
        val newVisited = visited.append([(row, col)]) // Cons
        val newBoard = playerBoard.updateCell(row, col, Number(0)) // Replace with uncovered
        
        var validCells = []
        each(0,8){ n => 
          val newRow = row + dx.get(n)
          // with val dx = ... (neighbours example stream library)
          val newCol = col + dy.get(n)
          if(isValidIndex(playerBoard.size, newRow, newCol) == true) {
            validCells = validCells.append([(newRow, newCol)]) // Cons
          }
        }
        validCells.foldLeft(newBoard) { (currentBoard, d) => floodFill(currentBoard, solutionBoard, d.first, d.second, newVisited)}
      case Number(n) => playerBoard.updateCell(row, col, cellStateSolution)
        // Stop flood-fill at numbered fields, but uncover the cell
      case _ => playerBoard // Stop flood-fill at mines or hidden/ flagged cells, letting them stay hidden
    }
  }
}

def neighboursOf(boardSize: Int, pos: (Int,Int), radius: Int) = {
  with val dx = for[Int] { range(neg(radius), radius + 1) }
  with val dy = for[Int] { range(neg(radius), radius + 1) }
  val newPosition = (pos.first + dx, pos.second + dy)
  if(isValidIndex(boardSize,newPosition.first,newPosition.second)){
    do emit(newPosition)
  }
}

/*procedure DFS(G, v) is
    label v as visited
    for all directed edges from v to w that are in G.adjacentEdges(v) do
        if vertex w is not labeled as visited then
            recursively call DFS(G, w)*/

def floodFillFast(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, visited: List[(Int,Int)]): Board = {
  // label v = (row,col) as visited:
  //var newVisited = []
  if(visited.any{cell => cell.first == row && cell.second == col}){// if current cell already visited
    playerBoard// newVisited = visited // visited stays the same (acts like a Set)
  } //else {newVisited = Cons((row, col), visited)} // if current cell not visited yet, mark it visited
  else{
  val newVisited = Cons((row, col), visited)
  with on[OutOfBounds].panic
  val cellStateSolution = solutionBoard.get(row).get(col)
  //with val neighbour = for[(Int,Int)] {neighboursOf(playerBoard.size,(row,col), 1)}
  val newBoard = playerBoard.updateCell(row, col, cellStateSolution)
  cellStateSolution match {
    case Number(0) => // If the cell has no adjacent mines, continue flood-fill
      val neighbours: List[(Int,Int)] = collectList{neighboursOf(playerBoard.size,(row,col), 1)}
      neighbours.foldLeft(newBoard){(currentBoard, cell) =>
  // handle cell (row,col) by modifying it on the board
      floodFillFast(currentBoard, solutionBoard, cell.first, cell.second, newVisited)
      }
    
      
               // Replace with uncovered
         
        //if(newVisited.any{c => c.first == cell.first && c.second == cell.second} == false){
          

        //} else{newBoard}
      
      //case Number(n) =>  playerBoard.updateCell(row, col, cellStateSolution) // TODO check
        // Stop flood-fill at numbered fields, but uncover the cell
      case _ => newBoard // TODO check Stop flood-fill at mines or hidden/ flagged cells, letting them stay hidden
  }
  }
}


/*def floodFillFast(
    playerBoard: Board,
    solutionBoard: Board,
    row: Int,
    col: Int,
    visited: List[(Int, Int)]
): Board = {
  // Check if out of bounds
  if (row < 0 || col < 0 || row >= playerBoard.size || col >= playerBoard.size) {
    playerBoard
  }
  else{

  // Check if already visited
  if (visited.any{el => el.first == row && el.second == col}) {
    playerBoard
  }
  else{

  // Mark the cell as visited
  var newVisited = []
  if(visited.any{el => el.first == row && el.second == col} == false){
    newVisited = Cons((row, col),visited)
  }
  else{newVisited = visited}

  // Get the cell state from the solution board
  with on[OutOfBounds].panic
  val cellStateSolution = solutionBoard.get(row).get(col)

  cellStateSolution match {
    case Number(0) =>
      // Uncover the cell on the player's board
      val updatedBoard = playerBoard.updateCell(row, col, Number(0))

      // Recursively process all neighboring cells
      val directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
      directions.foldLeft(updatedBoard) { (currentBoard, dir) =>
        val (dx, dy) = dir
        floodFillFast(currentBoard, solutionBoard, row + dx, col + dy, newVisited)
      }

    case Number(n) =>
      // Uncover the cell with its number on the player's board
      val updatedBoard = playerBoard.updateCell(row, col, Number(n))
      updatedBoard

    case _ =>
      // Stop flood-fill if it's a mine
      //println(s"Hit a mine at ($row, $col)! Game over.")
      playerBoard
  }}}
}*/

/*
def floodFillFast(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, visited: List[(Int, Int)]): Board = {
  val dx = [-1, -1, -1, 0, 0, 1, 1, 1]
  val dy = [-1, 0, 1, -1, 1, -1, 0, 1]
  println(genericShow(visited))
  if(isValidIndex(playerBoard.size,row, col) == false || visited.any{el => el.first == row && el.second == col}) {println("playerBoard"); playerBoard}
  else {
    println("2 here")
    with on[OutOfBounds].panic
    if (isValidIndex(playerBoard.size, row, col) == false) {playerBoard}
    else{
    val cellStateSolution = solutionBoard.get(row).get(col)
    cellStateSolution match {
      case Number(0) => // If the cell has no adjacent mines, continue flood-fill
      println("3 here")
        val newVisited = Cons((row,col), visited)
        val newBoard = playerBoard.updateCell(row, col, Number(0)) // Replace with uncovered
        
        //var validCells = []
        val directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        println("HERE")
          directions.foldLeft(newBoard) { (currentBoard, d) =>
            floodFillFast(currentBoard, solutionBoard, row + d.first, col + d.second, newVisited)
          }
        //validCells.foldLeft(newBoard) { (currentBoard, d: (Int,Int)) => floodFillFast(currentBoard, solutionBoard, d.first, d.second, newVisited)}
      case Number(n) => println("4 here"); playerBoard.updateCell(row, col, cellStateSolution)
        // Stop flood-fill at numbered fields, but uncover the cell
      case _ => println("5 here"); playerBoard // Stop flood-fill at mines or hidden/ flagged cells, letting them stay hidden
    }
  }}
}*/

/*
def floodFillFast(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, visited: List[(Int, Int)]): Board = {
  def isValidMove(r: Int, c: Int): Bool = {
    isValidIndex(playerBoard.size, r, c) && visited.any{el => el.first == r && el.second == c} == false
  }
  
  if (isValidMove(row, col) == false) { playerBoard }
  else {
    with on[OutOfBounds].panic
    val cellStateSolution = solutionBoard.get(row).get(col)
    val newVisited = Cons((row,col), visited)
    val updatedBoard = playerBoard.updateCell(row, col, cellStateSolution)
    
    cellStateSolution match {
      case Number(0) => 
        val neighbors = [
          (row - 1,col- 1), (row- 1,col), (row- 1,col+1),
          (row,col- 1),                 (row,col+1),
          (row+1,col- 1), (row+1,col), (row+1,col+1)
        ]
        
        neighbors.foldLeft(updatedBoard) { (board, pos) =>
          if (isValidMove(pos.first, pos.second)) {
            floodFillFast(board, solutionBoard, pos.first, pos.second, newVisited)
          } else {
            board
          }
        }
        
      case _ => updatedBoard
    }
  }
}*/


/*
def floodFillFast(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, visited: List[(Int, Int)]): Board = {
  if(visited.any{el => el.first == row && el.second == col}) playerBoard
  else {
    with on[OutOfBounds].panic
    val cellStateSolution = solutionBoard.get(row).get(col)
    cellStateSolution match {
      case Number(0) => // If the cell has no adjacent mines, continue flood-fill
        //val newVisited = visited.append([(row, col)]) // Cons
        val rc: (Int, Int) = (row, col)
        val newVisited: List[(Int,Int)] = Cons(rc,visited)
        val newBoard = playerBoard.updateCell(row, col, Number(0)) // Replace with uncovered
        with val dx = for[Int] { range(neg(1), 2) }
        with val dy = for[Int] { range(neg(1), 2) }
        
        var validCells = []
           //with val dx = ... (neighbours example stream library)
          if(isValidIndex(playerBoard.size, dx, dy) == true) {
            //validCells = validCells.append([(dx, dy)]) // Cons
            validCells = Cons((dx, dy),validCells)
          }
        validCells.foldLeft(newBoard) { (currentBoard, d: (Int,Int)) => 
          floodFillFast(currentBoard, solutionBoard, d.first, d.second, newVisited)}
      case Number(n) => playerBoard.updateCell(row, col, cellStateSolution)
        // Stop flood-fill at numbered fields, but uncover the cell
      case _ => playerBoard // Stop flood-fill at mines or hidden/ flagged cells, letting them stay hidden
    }
  }
}*/

// perform the given move by returning the new Board after the given move
// uses the flood fill algorithm to recursively uncover adjacent Number cells once an empty cell is uncovered
def makeMove(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, action: Action): Board/{gameOver} = {
  var newPlayerBoard = playerBoard
  try {
    if(isValidMove(playerBoard, row, col, action) == false){
      playerBoard
    } else {
      with on[OutOfBounds].panic
      val cellStateSolution = solutionBoard.get(row).get(col)
      val cellStatePlayer = playerBoard.get(row).get(col)
      action match {
        case Flag() => cellStatePlayer match { // move is valid => only first two cases (Hidden/Flagged) possible
          case Hidden() => newPlayerBoard = newPlayerBoard.updateCell(row, col, Flagged())
          case Flagged() => newPlayerBoard = newPlayerBoard.updateCell(row, col, Hidden())
          case _ => do invalidInput("TODO not possible because we already checked the move was valid")
        }
        case Uncover() => cellStateSolution match {
          case Mine() => do gameOver(solutionBoard)
          case _ => newPlayerBoard = newPlayerBoard.floodFillFast(solutionBoard, row, col, [])
      }}
      newPlayerBoard
    }
  } with invalidInput{ m =>
    println(m)
    playerBoard
  }
}

def parseCommand(command: List[String], boardSize: Int): Command/{invalidInput} = {
  val len = command.size
  var cmd = Help() // TODO other way to initialize this?
  with on[OutOfBounds].panic
  if(len == 1){
    val a = command.get(0)
    if(a == "h"){
      cmd = Help()
    }
    else if(a == "q"){
      cmd = Quit()
    }
    else{
      do invalidInput("invalid input: you didn't type a valid action :(" )
      cmd = Help()
    }
  }
  else if(len == 2){
    do invalidInput("invalid input: col coordinate is missing")
    cmd = Help()
  }
  else if(len == 3){
    with on[OutOfBounds].panic
    val a: String = command.get(0)
    val xString: String = command.get(1)
    with on[WrongFormat].default{cmd = Help()}
    val x: Int = xString.toInt()
    val yString: String = command.get(2)
    val y: Int = yString.toInt()

    if(isValidIndex(boardSize, x, y)){
      if(a == "f"){
        cmd = PerformAction(Flag(),x,y)
      }
      else {
        if(a == "u"){
        cmd = PerformAction(Uncover(),x,y)
      }
       else {do invalidInput("invalid input: you didn't type a correct action" ++ helpMessage)}
    }}
    else{do invalidInput("invalid input: given coordinates (row,col) = (" ++ show(x) ++ "," ++ show(y) ++ ") " ++ "are not within the board of size " ++ show(boardSize))}
  }
  else{do invalidInput("TODO: wrong number of actions not possible?!")}
  cmd
}

def playMinesweeper(boardSize: Int, numMines: Int): Unit = {
  println("Welcome to Fair Minesweeper!")
  println("To start a new game, press Enter on your keyboard")
  with console;
  do readLine()
  try{
  val solutionBoard = generateBoard(boardSize, numMines)
  var playerBoard = generatePlayerBoard(boardSize)
  printBoard(playerBoard)
  
  println(helpMessage)

  var end = false
  while(end != true){
  var commands = []
  val action = do readLine()
  commands = commands.append([action])
  if(action == "u" || action == "f"){
    println("type the number of the row you want to make your move at")
    val x = do readLine()
    commands = commands.append([x])
    println("type the number of the col you want to make your move at")
    val y = do readLine()
    commands = commands.append([y])
  }
  val cmd = parseCommand(commands, boardSize)
  
  cmd match {
    case PerformAction(a,x,y) => try {playerBoard = makeMove(playerBoard, solutionBoard, x, y, a); printBoard(playerBoard)
    }with gameOver{b =>
    println(gameOverMessage)
    println("This is the solution board:")
    printBoard(b)
    end = true}
    case Help() => println(helpMessage)
    case Quit() => end = true//println("TODO Quit the game"); end = true
    }
    if(playerBoard.all{row => row.all{cell => cell match {
      case Hidden() => false
      case _ => true
      }
    }
  })try{do winGame(playerBoard)} with winGame{b => println(wonMessage)}
  }} with invalidInput{m => println(m); resume(())}
}


val exampleSolutionBoard: Board = [
  [Number(1), Number(1), Number(1), Number(0)],
  [Number(1), Mine(), Number(1), Number(0)],
  [Number(1), Number(1), Number(2), Number(1)],
  [Number(0), Number(0), Number(1), Mine()]
]

def main(): Unit = {
  /*val solutionBoard = exampleSolutionBoard
  printBoard(solutionBoard)
  var playerBoard = generatePlayerBoard(solutionBoard.size)
  printBoard(playerBoard)
  try{
  playerBoard = playerBoard.makeMove(solutionBoard, 0, 3, Uncover())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 0, 1, Flag())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 0, 1, Flag())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 0, 1, Flag())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 1, 1, Flag())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 0, 3, Uncover())
  printBoard(playerBoard)

  playerBoard = playerBoard.makeMove(solutionBoard, 3, 3, Uncover())
  printBoard(playerBoard)

  playMinesweeper(4,2)
  } with gameOver{b =>
  println(gameOverMessage)
  println("This is the solution board:")
  printBoard(b)}*/
  playMinesweeper(10,2)
}



