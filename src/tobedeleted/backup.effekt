module src/minesweeper
import tty
import io/console
import src/utils
import stream

extern js"""
  function getRandomInt(min, max) {
    const minCeiled = Math.ceil(min);
    const maxFloored = Math.floor(max);
    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive
  }
"""

extern def randomInt(minInclusive: Int, maxExclusive: Int): Int =
  js"getRandomInt(${minInclusive}, ${maxExclusive})"

/// Gets the neighbours of a given position, excluding the position itself
/// with radius=1, those are the 8 immediate neighbours (including the diagonal)
/// with radius=2, these are neighbours&their neighbours
/// 
def neighboursOf(boardSize: Int, pos: (Int,Int), radius: Int) = {
  //println("Finding neighbors for position" ++ show(pos.first) ++ "," ++ show(pos.second))
  with val dx = for[Int] { range(neg(radius), radius + 1) }
  with val dy = for[Int] { range(neg(radius), radius + 1) }
  val newPosition = (pos.first + dx, pos.second + dy)
  if(isValidIndex(boardSize,newPosition.first,newPosition.second) && ((dx == 0) && (dy == 0)) == false){
    //println("  Emitting neighbor position: (" ++ show(newPosition.first) ++ "," ++ show(newPosition.second))
    do emit(newPosition)
  }
}

// update the state of a cell at index [row_index][col_index] with the given new state
// updating here means returns a new board with the updated cell
def updateCell(board: Board, row_index: Int, col_index: Int, state: CellState): Board = {
  board.updateAt(row_index){r =>
    r.updateAt(col_index){s => state}}
}

// generates a new solution board by placing the given number of mines randomly on a new board of given size
// all cells not containing a mine will be Number() cells holding the number of mines surrounding the cell
def generateSolutionBoard(size: Int, numMines: Int, firstMove: (Int, Int)): Board/{invalidInput} = {
  if(numMines > size*size - 9){ // TODO move this check earlier in the playMinesweeper
    do invalidInput("invalid input: number of mines mustn't exceed the number of cells")
  }
  if(size < 1){
    do invalidInput("invalid input: size must be a positive number")
  }
  if(numMines < 0){
    do invalidInput("invalid input: number of mines musn't be negative")
  }
  with on[OutOfBounds].panic
  var board: Board = fill[List[CellState]](size, fill[CellState](size, Number(0))) 

  val safeZone: List[(Int,Int)] = Cons(firstMove, collectList{neighboursOf(size, firstMove, 1)})

  // Mine Placement
  var minesPlaced = 0

  while (minesPlaced < numMines) {
    val r: Int = randomInt(0, size)
    val c: Int = randomInt(0, size)
    val cell: CellState = board.get(r).get(c)

    cell match {
      case Number(0) => 
        if(safeZone.any{p => p.first == r && p.second == c} == false){
          board = updateCell(board, r, c, Mine())
          minesPlaced = minesPlaced + 1
        }
      case _ => board = board // TODO: better way to do this?
    }
  }

  // Correct Placement of Numbers based on given Mine Placement
  board.foreachIndex{ (row_idx, row) =>
    row.foreachIndex{ (col_idx, col) => 
      if(isMine(board, row_idx, col_idx) == false){
        val mines = countAdjacentMines(board, row_idx, col_idx)
        board = board.updateCell(row_idx, col_idx, Number(mines))
      }
    }
  }
  board
}

def generatePlayerBoard(size: Int): Board = {
  fill[List[CellState]](size, fill[CellState](size, Hidden())) 
}

// count the number of mines surrounding a cell (max: 8)
def countAdjacentMines(board: Board, row: Int, col: Int): Int = {
  val size = board.size
  var count = 0
  val dx = [-1, -1, -1, 0, 0, 1, 1, 1]
  val dy = [-1, 0, 1, -1, 1, -1, 0, 1]

  with on[OutOfBounds].panic
  each(0,8){ n => 
    val newRow = row + dx.get(n)
    val newCol = col + dy.get(n)
    if(isValidIndex(size, newRow, newCol)) {
      if(isMine(board, newRow, newCol)){
        count = count + 1
      }
    }
  }
  count
}

// check if a given index [row][col] is a valid index on an arbitrary board of given size
def isValidIndex(size: Int, row: Int, col: Int): Bool = {
  (row >= 0) && (row < size) && (col >= 0) && (col < size)
}

// check if a cell with index [row][col] on a given board is a mine
def isMine(board: Board, row: Int, col: Int): Bool = {
  with on[OutOfBounds].panic
  board.get(row).get(col) match {
    case Mine() => true
    case _ => false
  }
}

// validate a given move of the player by comparing the desired move to the current player board
def isValidMove(board: Board, row: Int, col: Int, action: Action): Bool/{invalidInput} = {
  if(isValidIndex(board.size, row, col) == false){
    do invalidInput("invalid input: given coordinates (row,col) = (" ++ show(row) ++ "," ++ show(col) ++ ") " ++ "are not within the board of size " ++ show(board.size))
    false
  } 
  else {// index is valid for board
    with on[OutOfBounds].panic
    val cellState = board.get(row).get(col)
    cellState match {
      case Number(n) => do invalidInput("invalid input: cells already uncovered can't be modified"); false
      case Mine() => do invalidInput("TODO Case not possible: player board can't have mines"); false
      case _ => true //for Hidden and Flagged cells, all actions are possible
    }
  }
}

// TODO check this!! This should fix that in floodfill too many cells are uncovered (see smartpone image)
def nonDiagonalNeighboursOf(boardSize: Int, pos: (Int, Int), radius: Int) = {
  // Define movement directions: top, bottom, left, right (no diagonals)
  val dx = [-1, 1, 0, 0] // Up, Down, Left, Right
  val dy = [0, 0, -1, 1] // Up, Down, Left, Right

  with on[OutOfBounds].panic
  each(0,4){ n => 
    val newRow = pos.first + dx.get(n)
    val newCol = pos.second + dy.get(n)
    if(isValidIndex(boardSize, newRow, newCol)) {
      do emit((newRow, newCol))
    }
  }
}

// recursive algorithm to uncover multiple cells at once based on one move and return the resulting Board
// assuming the move of the first call of floodFill is a valid one
def floodFill(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, visited: List[(Int,Int)]): (Board, List[(Int, Int)]) = {
  if(visited.any{cell => cell.first == row && cell.second == col}){// if current cell already visited
    (playerBoard, visited)//visited stays the same (acts like a Set) TODO change into a Set once possible
  } 
  else{
  val newVisited = Cons((row, col), visited)
  
  with on[OutOfBounds].panic
  val cellStateSolution = solutionBoard.get(row).get(col)
  val newBoard = playerBoard.updateCell(row, col, cellStateSolution) 

  cellStateSolution match {
    case Number(0) => // If the cell has no adjacent mines, continue flood-fill
      val neighbours: List[(Int,Int)] = collectList{nonDiagonalNeighboursOf(playerBoard.size,(row,col), 1)}
      
      neighbours.foldLeft((newBoard, newVisited)){(acc, cell) => // handle cell (row,col) by modifying it on the board
        val (currentBoard, currentVisited) = acc
        floodFill(currentBoard, solutionBoard, cell.first, cell.second, currentVisited)
      }
    case Number(n) => (newBoard, newVisited)
    case _ => (newBoard, newVisited)
    }
  }
}

def interestingCells(playerBoard: Board): List[(Int,Int)] = {
  var cells = []
  playerBoard.foreachIndex{ (row_idx, row) =>
    row.foreachIndex{ (col_idx, col) => 
      with on[OutOfBounds].panic
      val cellState = playerBoard.get(row_idx).get(col_idx)
      cellState match {
        case Number(0) => cells = cells // TODO check
        case Number(n) => 
          val neighbours: List[(Int, Int)] = collectList{neighboursOf(playerBoard.size,(row_idx,col_idx), 1)}
          if (neighbours.any{n => 
            val r = n.first
            val c = n.second
            with on[OutOfBounds].panic
            val state = playerBoard.get(r).get(c)
            state match {
              case Hidden() => true
              case _ => false
            }}) cells = Cons((row_idx,col_idx), cells)
        case _ => cells = cells // TODO special case Flag cells => check solution board here?
      }
    }
  }
  cells
}

def candidateCells(playerBoard: Board, interesting: List[(Int, Int)]): List[(Int,Int)] = {
  var candidates = []
  with val candidate: (Int,Int) = interesting.foreach{p => neighboursOf(playerBoard.size, p.first, p.second, 1)}
  
  with on[OutOfBounds].panic
  val cellState = playerBoard.get(candidate.first).get(candidate.second)
  cellState match {
    case Hidden() => candidates = Cons(candidate, candidates)
  }
}

// perform the given move by returning the new Board after the given move
// uses the flood fill algorithm to recursively uncover adjacent Number cells once an empty cell is uncovered
def makeMove(playerBoard: Board, solutionBoard: Board, row: Int, col: Int, action: Action): Board/{gameOver} = {
  var newPlayerBoard = playerBoard
  try {
    if(isValidMove(playerBoard, row, col, action) == false){
      playerBoard
    } else {
      with on[OutOfBounds].panic
      val cellStateSolution = solutionBoard.get(row).get(col)
      val cellStatePlayer = playerBoard.get(row).get(col)
      action match {
        case Flag() => cellStatePlayer match { // move is valid => only first two cases (Hidden/Flagged) possible
          case Hidden() => newPlayerBoard = newPlayerBoard.updateCell(row, col, Flagged())
          case Flagged() => newPlayerBoard = newPlayerBoard.updateCell(row, col, Hidden())
          case _ => do invalidInput("TODO not possible because we already checked the move was valid")
        }
        case Uncover() => cellStateSolution match {
          case Mine() => do gameOver(solutionBoard)
          case _ => 
            val (updatedPlayerBoard, _) = newPlayerBoard.floodFill(solutionBoard, row, col,[])
            newPlayerBoard = updatedPlayerBoard

      }}
      newPlayerBoard
    }
  } with invalidInput{ m =>
    println(m)
    playerBoard
  }
}

def parseCommand(command: List[String], boardSize: Int): Command/{invalidInput} = {
  val len = command.size
  var cmd = Help() // TODO other way to initialize this?
  with on[OutOfBounds].panic
  if(len == 1){
    val a = command.get(0)
    if(a == "h"){
      cmd = Help()
    }
    else if(a == "q"){
      cmd = Quit()
    }
    else{
      do invalidInput("invalid input: you didn't type a valid action :(" )
      cmd = Help()
    }
  }
  else if(len == 2){
    do invalidInput("invalid input: col coordinate is missing")
    cmd = Help()
  }
  else if(len == 3){
    with on[OutOfBounds].panic
    val a: String = command.get(0)
    val xString: String = command.get(1)
    with on[WrongFormat].default{cmd = Help()}
    val x: Int = xString.toInt()
    val yString: String = command.get(2)
    val y: Int = yString.toInt()

    if(isValidIndex(boardSize, x, y)){
      if(a == "f"){
        cmd = PerformAction(Flag(),x,y)
      }
      else {
        if(a == "u"){
        cmd = PerformAction(Uncover(),x,y)
      }
       else {do invalidInput("invalid input: you didn't type a correct action" ++ helpMessage)}
    }}
    else{do invalidInput("invalid input: given coordinates (row,col) = (" ++ show(x) ++ "," ++ show(y) ++ ") " ++ "are not within the board of size " ++ show(boardSize))}
  }
  else{do invalidInput("TODO: wrong number of actions not possible?!")}
  cmd
}

def getFirstMove(boardSize: Int): (Int, Int) = {
  var firstMove = (-1,-1)
  while(firstMove.first == -1 && firstMove.second == -1){
    println("To make your first move, enter the number of the row you want to make your move at")
    with console;
    val row = do readLine()
    println("Now enter the number of the column you want to make your move at")
    val col = do readLine()

    with on[WrongFormat].default{()}
    val maybeMove = (row.toInt, col.toInt)

    if(isValidIndex(boardSize,maybeMove.first, maybeMove.second)){
      firstMove = maybeMove
    }
  }
  firstMove
}

def playMinesweeper(boardSize: Int, numMines: Int): Unit = {
  println("Welcome to Fair Minesweeper!")
  println("To start a new game, press Enter on your keyboard")
  with console;
  do readLine()
  var playerBoard = generatePlayerBoard(boardSize)
  printBoard(playerBoard)
  val firstMove = getFirstMove(boardSize)
  try{
  val solutionBoard = generateSolutionBoard(boardSize, numMines, firstMove)

  //playerBoard = playerBoard.updateCell(firstMove.first, firstMove.second, Number(0)) // safe because we handle this move in generateSolutionBoard
  val (newPlayerBoard, _) = playerBoard.floodFill(solutionBoard, firstMove.first, firstMove.second, [])
  playerBoard = newPlayerBoard
  printBoard(playerBoard)

  //TODO remove
  println(genericShow(interestingCells(playerBoard)))
  // 
  println(helpMessage)

  var end = false
  while(end != true){
  var commands = []
  with console;
  val action = do readLine()
  commands = commands.append([action])
  if(action == "u" || action == "f"){
    println("type the number of the row you want to make your move at")
    val x = do readLine()
    commands = commands.append([x])
    println("type the number of the col you want to make your move at")
    val y = do readLine()
    commands = commands.append([y])
  }
  val cmd = parseCommand(commands, boardSize)
  
  cmd match {
    case PerformAction(a,x,y) => try {playerBoard = makeMove(playerBoard, solutionBoard, x, y, a); printBoard(playerBoard)
    }with gameOver{b =>
    println(gameOverMessage)
    println("This is the solution board:")
    printBoard(b)
    end = true}
    case Help() => println(helpMessage)
    case Quit() => end = true//println("TODO Quit the game"); end = true
    }
    if(playerBoard.all{row => row.all{cell => cell match {
      case Hidden() => false
      case _ => true
      }
    }
  })try{do winGame(playerBoard)} with winGame{b => println(wonMessage)}
  }} with invalidInput{m => println(m); resume(())}
}

/// Gets the neighbours of a given position.
/// with radius=1, those are immediate neighbours (including the diagonal)
/// with radius=2, these are neighbours&their neighbours
/// ...
def neighboursOf(pos: (Int,Int), radius: Int) = {
  with val dx = for[Int] { range(neg(radius), radius + 1) }
  with val dy = for[Int] { range(neg(radius), radius + 1) }
  val newPosition = (pos.first + dx, pos.second + dy)
  do emit(newPosition)
}

def main(): Unit = {
  playMinesweeper(14,16)
}



