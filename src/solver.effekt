import src/utils
import src/fairMinesweeper
import src/safeMoves
import src/fairRules


def solver(startingBoard: Board, numMines: Int): Unit = {
  var mineCount = numMines
  val boardSize = startingBoard.size()
  var playerBoard = startingBoard
  printBoard(startingBoard)
  val firstMove = Pos(randomInt(0, boardSize), randomInt(0, boardSize))
  println("Solvers first move is uncovering (" ++ show(firstMove.r) ++ "," ++ show(firstMove.c) ++ ")")

  try {
    var solutionBoard = generateSolutionBoard(boardSize, numMines, firstMove)
    // Perform the first move (safe by definition)
    playerBoard = floodFill(solutionBoard, startingBoard, firstMove)
    printBoard(playerBoard)

    var end = false
    while (not(end)) {
      val safeMoves = safeMoves(playerBoard)

      if (safeMoves.isEmpty) {
        println("No more safe moves can be determined.")
        // Check if all remaining cells are mines
          try {
            println("Solver has successfully flagged all mines.")
            do winGame(playerBoard)
          } with winGame { finalBoard =>
            if (mineCount == playerBoard.join.count {
            case Hidden() => true
            case _ => false
            }) {
              printBoard(finalBoard)
              println(wonMessage)
              end = true
            } else resume(())
          }
         
          println("Solver has to guess since no safe move is possible")
          with on[OutOfBounds].panic
          val hiddenCells = playerBoard.getHiddenCells()
          val guess = hiddenCells.get(randomInt(0, hiddenCells.size))
          println("Solver is guessing at (" ++ show(guess.r) ++ "," ++ show(guess.c) ++ ")")
          try {
            try {
              val (newSolutionBoard, newPlayerBoard) = makeMove(solutionBoard, playerBoard, guess, Uncover())
              solutionBoard = newSolutionBoard
              playerBoard = newPlayerBoard
              printBoard(playerBoard)
            } with reduceMineCount {
              mineCount = mineCount - 1
            } 
          } with gameOver { (reason, finalBoard) =>
            println(reason)
            println(gameOverMessage)
            println("Game Over: The solver guessed wrong.")
            printBoard(finalBoard)
            end = true
          }
        }
        else {
        // Perform all safe moves
        safeMoves.foreach {
          case PerformAction(action, Pos(row, col)) =>
            try {
              println("Performing action: " ++ genericShow(action) ++ " at (" ++ show(row) ++ "," ++ show(col) ++ ")")
              val (newSolutionBoard, newPlayerBoard) = makeMove(solutionBoard, playerBoard, Pos(row, col), action)
              solutionBoard = newSolutionBoard
              playerBoard = newPlayerBoard
              printBoard(playerBoard)
            } with reduceMineCount {
              mineCount = mineCount - 1
            } with gameOver { (reason, finalBoard) =>
              println(reason)
              println(gameOverMessage)
              println("Game Over: The solver made a mistake.")
              printBoard(finalBoard)
              end = true
            }
          case _ => ()
        }
      }
      // Check for a win condition
      if (mineCount == playerBoard.join.count {
        case Number(_) => false
        case _ => true
      }) {
        try {
          println("Solver has uncovered all safe cells and flagged all mines.")
          do winGame(playerBoard)
        } with winGame { _ =>
          printBoard(playerBoard)
          println(wonMessage)
          end = true
        }
      }
    }
  } with invalidInput { msg =>
    println(msg)
    resume(())
  }
}

def main(): Unit = {
  val startingBoard = generatePlayerBoard(6)
  solver(startingBoard, 10)
}